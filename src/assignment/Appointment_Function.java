/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment;

/**
 *
 * @author user
 */

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class Appointment_Function extends javax.swing.JFrame {

    Object[] myData = new Object[25];
    
    public Appointment_Function() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker();
        cmbCenter = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPeople = new javax.swing.JTable();
        cmbPeople = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnModifyDose1 = new javax.swing.JButton();
        btnModifyDose2 = new javax.swing.JButton();
        btnRemoveDose1 = new javax.swing.JButton();
        btnRemoveDose2 = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        cmbCenter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAdd.setText("Add");
        btnAdd.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tblPeople.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email", "Phone Number", "Address", "IC/Passport No.", "Dose", "Date", "Time", "Center Code", "Center Name", "Center Address", "Vaccine", "Batch", "Dose", "Date", "Time", "Center Code", "Center Name", "Center Address", "Vaccine", "Batch"
            }
        ));
        tblPeople.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(tblPeople);

        cmbPeople.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Citizens", "Non-Citizens" }));
        cmbPeople.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPeopleActionPerformed(evt);
            }
        });

        jLabel1.setText("Add, Modify, Remove, View and Search Appointment Records of Registered People");
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        jLabel2.setText("Please select a group:");
        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel3.setText("Please selctc a date:");
        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel4.setText("Please select a time:");
        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel5.setText("Vaccination Center:");
        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        btnModifyDose1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnModifyDose1.setText("Modify Dose 1");
        btnModifyDose1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyDose1ActionPerformed(evt);
            }
        });

        btnModifyDose2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnModifyDose2.setText("Modify Dose 2");
        btnModifyDose2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyDose2ActionPerformed(evt);
            }
        });

        btnRemoveDose1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnRemoveDose1.setText("Remove Dose 1");
        btnRemoveDose1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDose1ActionPerformed(evt);
            }
        });

        btnRemoveDose2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnRemoveDose2.setText("Remove Dose 2");
        btnRemoveDose2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDose2ActionPerformed(evt);
            }
        });

        btnView.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel6.setText("Search Here: ");

        btnSearch.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(datePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbPeople, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbCenter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(247, 247, 247)
                .addComponent(jLabel6)
                .addGap(48, 48, 48)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnModifyDose2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModifyDose1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(76, 76, 76)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnRemoveDose1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnRemoveDose2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(85, 85, 85))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(422, 422, 422))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbPeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd)
                    .addComponent(btnRemoveDose1)
                    .addComponent(jLabel6)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifyDose1)
                    .addComponent(btnRemoveDose2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifyDose2)
                    .addComponent(btnView))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnSearch))
                .addGap(68, 68, 68)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        
        // add Vaccination Center to combo box
        cmbCenter.removeAllItems();
        File file = new File("Vaccination_center.txt");
        
        try
        {
            
            Scanner Sc = new Scanner(file);
            while(Sc.hasNextLine())
            {
                String Line = Sc.nextLine();
                String[] Arr = Line.split(";");
                cmbCenter.addItem(Arr[1]);
                //write to jtable
            }
        }
        catch(FileNotFoundException ex)
        {
            
        }
        
        FileOperation Fop = new FileOperation();
        Fop.ReadfromFile("");
    }//GEN-LAST:event_formPropertyChange

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        if(cmbPeople.getSelectedIndex()==0)
        {
            // get date from datepicker
            Date date1 = new Date(datePicker1.getText());
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            String appDate = formatter.format(date1);
            System.out.println(appDate);
        
            // get time from timepicker
            String time = timePicker1.getText();
        
            // get center from combo box
            String center = cmbCenter.getSelectedItem().toString();
        
            //get details of vaccination center
            Vaccination_Center vacCenter = new Vaccination_Center();
        
            File file = new File("Vaccination_Center.txt");
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String Line = Sc.nextLine();
                    String[] Arr = Line.split(";");
                    if(center.equals(Arr[1]))
                    {
                        vacCenter.setCode(Arr[0]);
                        vacCenter.setName(Arr[1]);
                        vacCenter.setAddress(Arr[2]);
                        vacCenter.setVac(new Vaccines(Arr[3],Arr[4]));
                    }
                    System.out.println("Found");
                    System.out.println(vacCenter);
                }
            }   
            catch(FileNotFoundException ex)
            {
            
            }
        
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 6).toString();
        
            if(isNull.equals("null"))
            {
                Appointment1 app1 = new Appointment1(appDate,time);
                app1.setVacCenter(vacCenter);
                
                model.setValueAt(appDate,SelRow,6);
                model.setValueAt(time,SelRow,7);
                model.setValueAt(vacCenter.getCode(),SelRow,8);
                model.setValueAt(vacCenter.getName(),SelRow,9);
                model.setValueAt(vacCenter.getAddress(),SelRow,10);
                model.setValueAt(vacCenter.getVaccineName(),SelRow,11);
                model.setValueAt(vacCenter.getVaccineBatch(),SelRow,12);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app1);
            
                System.out.println(C1.toString3());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("Citizens.txt", SelRow, C1.toString3());
            }
            else if(model.getValueAt(SelRow, 14).toString().equals("null"))
            {
                String appDate1 = model.getValueAt(SelRow, 6).toString();
                String appTime1 = model.getValueAt(SelRow, 7).toString();
                Vaccination_Center vacCenter1 = new Vaccination_Center(model.getValueAt(SelRow, 8).toString(), 
                        model.getValueAt(SelRow, 9).toString(), model.getValueAt(SelRow, 10).toString(), 
                        model.getValueAt(SelRow, 11).toString(), model.getValueAt(SelRow, 12).toString());
                
                Appointment2 app2 = new Appointment2(appDate1,appTime1,vacCenter1,appDate,time);
                app2.setVacCenter(vacCenter);
                
                model.setValueAt(appDate,SelRow,14);
                model.setValueAt(time, SelRow,15);
                model.setValueAt(vacCenter.getCode(),SelRow,16);
                model.setValueAt(vacCenter.getName(),SelRow,17);
                model.setValueAt(vacCenter.getAddress(),SelRow,18);
                model.setValueAt(vacCenter.getVaccineName(),SelRow,19);
                model.setValueAt(vacCenter.getVaccineBatch(),SelRow,20);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app2);
            
                System.out.println(C1.toString2());
        
                //FileOperation Fop = new FileOperation();
                //Fop.ModifyTextFile("Citizens.txt", SelRow, C1.toString2());
            }
        }
   
        if(cmbPeople.getSelectedIndex()==1)
        {
            // get date from datepicker
            Date date1 = new Date(datePicker1.getText());
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            String appDate = formatter.format(date1);
            System.out.println(appDate);
        
            // get time from timepicker
            String time = timePicker1.getText();
        
            // get center from combo box
            String center = cmbCenter.getSelectedItem().toString();
        
            //get details of vaccination center
            Vaccination_Center vacCenter = new Vaccination_Center();
        
            File file = new File("Vaccination_Center.txt");
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String Line = Sc.nextLine();
                    String[] Arr = Line.split(";");
                    if(center.equals(Arr[1]))
                    {
                        vacCenter.setCode(Arr[0]);
                        vacCenter.setName(Arr[1]);
                        vacCenter.setAddress(Arr[2]);
                        vacCenter.setVac(new Vaccines(Arr[3],Arr[4]));
                    }
                    System.out.println("Found");
                    System.out.println(vacCenter);
                }
            }   
            catch(FileNotFoundException ex)
            {
            
            }
        
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 6).toString();
        
            if(isNull.equals("null"))
            {
                Appointment1 app1 = new Appointment1(appDate,time);
                app1.setVacCenter(vacCenter);
                
                model.setValueAt(app1.getAppointmentDate(),SelRow,6);
                model.setValueAt(app1.getAppointmentTime(),SelRow,7);
                model.setValueAt(vacCenter.getCode(),SelRow,8);
                model.setValueAt(vacCenter.getName(),SelRow,9);
                model.setValueAt(vacCenter.getAddress(),SelRow,10);
                model.setValueAt(vacCenter.getVaccineName(),SelRow,11);
                model.setValueAt(vacCenter.getVaccineBatch(),SelRow,12);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app1);
            
                System.out.println(C1.toString3());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("NonCitizens.txt", SelRow, C1.toString3());
            }
            else if(model.getValueAt(SelRow, 14).toString().equals("null"))
            {
                String appDate1 = model.getValueAt(SelRow, 6).toString();
                String appTime1 = model.getValueAt(SelRow, 7).toString();
                Vaccination_Center vacCenter1 = new Vaccination_Center(model.getValueAt(SelRow, 8).toString(), 
                        model.getValueAt(SelRow, 9).toString(), model.getValueAt(SelRow, 10).toString(), 
                        model.getValueAt(SelRow, 11).toString(), model.getValueAt(SelRow, 12).toString());
                
                Appointment2 app2 = new Appointment2(appDate1,appTime1,vacCenter1,appDate,time);
                app2.setVacCenter(vacCenter);
                
                model.setValueAt(appDate,SelRow,14);
                model.setValueAt(time,SelRow,15);
                model.setValueAt(vacCenter.getCode(),SelRow,16);
                model.setValueAt(vacCenter.getName(),SelRow,17);
                model.setValueAt(vacCenter.getAddress(),SelRow,18);
                model.setValueAt(vacCenter.getVaccineName(),SelRow,19);
                model.setValueAt(vacCenter.getVaccineBatch(),SelRow,20);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app2);
            
                System.out.println(C1.toString2());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("NonCitizens.txt", SelRow, C1.toString2());
            }
        }
   
    }//GEN-LAST:event_btnAddActionPerformed

    private void cmbPeopleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPeopleActionPerformed
        
        DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
        model.setNumRows(0);
        
        if(cmbPeople.getSelectedIndex()==0)
        {
            File file = new File("Citizens.txt");     
        
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String[] line = Sc.nextLine().split(";");
                    model.addRow(line);
                }
            }
            catch(FileNotFoundException ex)
            {
            
            }   
        }
        else if(cmbPeople.getSelectedIndex()==1)
        {
            File file = new File("NonCitizens.txt");     
        
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String[] line = Sc.nextLine().split(";");
                    model.addRow(line);
                }
            }
            catch(FileNotFoundException ex)
            {
            
            }   
        }
    }//GEN-LAST:event_cmbPeopleActionPerformed

    private void btnModifyDose1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyDose1ActionPerformed
        
        if(cmbPeople.getSelectedIndex()==0)
        {
            // get date from datepicker
            Date date1 = new Date(datePicker1.getText());
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            String appDate = formatter.format(date1);
            System.out.println(appDate);
        
            // get time from timepicker
            String time = timePicker1.getText();
        
            // get center from combo box
            String center = cmbCenter.getSelectedItem().toString();
        
            //get details of vaccination center
            Vaccination_Center vacCenter = new Vaccination_Center();
        
            File file = new File("Vaccination_Center.txt");
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String Line = Sc.nextLine();
                    String[] Arr = Line.split(";");
                    if(center.equals(Arr[1]))
                    {
                        vacCenter.setCode(Arr[0]);
                        vacCenter.setName(Arr[1]);
                        vacCenter.setAddress(Arr[2]);
                        vacCenter.setVac(new Vaccines(Arr[3],Arr[4]));
                    }
                    System.out.println("Found");
                    System.out.println(vacCenter);
                }
            }   
            catch(FileNotFoundException ex)
            {
            
            }
        
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 6).toString();
        
            if(isNull.equals("null"))
            {
                JOptionPane.showOptionDialog(null, "Please add appointment!!! ", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);               
            }
            else 
            {
                String appDate2 = model.getValueAt(SelRow, 14).toString();
                String appTime2 = model.getValueAt(SelRow, 15).toString();
                Vaccination_Center vacCenter1 = new Vaccination_Center(model.getValueAt(SelRow, 16).toString(), 
                        model.getValueAt(SelRow, 17).toString(), model.getValueAt(SelRow, 18).toString(), 
                        model.getValueAt(SelRow, 19).toString(), model.getValueAt(SelRow, 20).toString());
                
                Appointment2 app2 = new Appointment2(appDate,time,vacCenter,appDate2,appTime2);
                app2.setVacCenter(vacCenter1);
                
                model.setValueAt(appDate,SelRow,6);
                model.setValueAt(time,SelRow,7);
                model.setValueAt(vacCenter.getCode(),SelRow,8);
                model.setValueAt(vacCenter.getName(),SelRow,9);
                model.setValueAt(vacCenter.getAddress(),SelRow,10);
                model.setValueAt(vacCenter.getVaccineName(),SelRow,11);
                model.setValueAt(vacCenter.getVaccineBatch(),SelRow,12);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app2);
            
                System.out.println(C1.toString2());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("Citizens.txt", SelRow, C1.toString2());
            }
        }
        else if(cmbPeople.getSelectedIndex()==1)
        {
            // get date from datepicker
            Date date1 = new Date(datePicker1.getText());
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            String appDate = formatter.format(date1);
            System.out.println(appDate);
        
            // get time from timepicker
            String time = timePicker1.getText();
        
            // get center from combo box
            String center = cmbCenter.getSelectedItem().toString();
        
            //get details of vaccination center
            Vaccination_Center vacCenter = new Vaccination_Center();
        
            File file = new File("Vaccination_Center.txt");
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String Line = Sc.nextLine();
                    String[] Arr = Line.split(";");
                    if(center.equals(Arr[1]))
                    {
                        vacCenter.setCode(Arr[0]);
                        vacCenter.setName(Arr[1]);
                        vacCenter.setAddress(Arr[2]);
                        vacCenter.setVac(new Vaccines(Arr[3],Arr[4]));
                    }
                    System.out.println("Found");
                    System.out.println(vacCenter);
                }
            }   
            catch(FileNotFoundException ex)
            {
            
            }
        
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 6).toString();
        
            if(isNull.equals("null"))
            {
                JOptionPane.showOptionDialog(null, "Please add appointment!!! ", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);               
            }
            else 
            {
                String appDate2 = model.getValueAt(SelRow, 14).toString();
                String appTime2 = model.getValueAt(SelRow, 15).toString();
                Vaccination_Center vacCenter1 = new Vaccination_Center(model.getValueAt(SelRow, 16).toString(), 
                        model.getValueAt(SelRow, 17).toString(), model.getValueAt(SelRow, 18).toString(), 
                        model.getValueAt(SelRow, 19).toString(), model.getValueAt(SelRow, 20).toString());
                
                Appointment2 app2 = new Appointment2(appDate,time,vacCenter,appDate2,appTime2);
                app2.setVacCenter(vacCenter1);
                
                model.setValueAt(appDate,SelRow,6);
                model.setValueAt(time,SelRow,7);
                model.setValueAt(vacCenter.getCode(),SelRow,8);
                model.setValueAt(vacCenter.getName(),SelRow,9);
                model.setValueAt(vacCenter.getAddress(),SelRow,10);
                model.setValueAt(vacCenter.getVaccineName(),SelRow,11);
                model.setValueAt(vacCenter.getVaccineBatch(),SelRow,12);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app2);
            
                System.out.println(C1.toString2());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("NonCitizens.txt", SelRow, C1.toString2());
            }
        }
    }//GEN-LAST:event_btnModifyDose1ActionPerformed

    private void btnModifyDose2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyDose2ActionPerformed
        
        if(cmbPeople.getSelectedIndex()==0)
        {
            // get date from datepicker
            Date date1 = new Date(datePicker1.getText());
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            String appDate = formatter.format(date1);
            System.out.println(appDate);
        
            // get time from timepicker
            String time = timePicker1.getText();
        
            // get center from combo box
            String center = cmbCenter.getSelectedItem().toString();
        
            //get details of vaccination center
            Vaccination_Center vacCenter = new Vaccination_Center();
        
            File file = new File("Vaccination_Center.txt");
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String Line = Sc.nextLine();
                    String[] Arr = Line.split(";");
                    if(center.equals(Arr[1]))
                    {
                        vacCenter.setCode(Arr[0]);
                        vacCenter.setName(Arr[1]);
                        vacCenter.setAddress(Arr[2]);
                        vacCenter.setVac(new Vaccines(Arr[3],Arr[4]));
                    }
                    System.out.println("Found");
                    System.out.println(vacCenter);
                }
            }   
            catch(FileNotFoundException ex)
            {
            
            }
        
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 6).toString();
        
            if(isNull.equals("null"))
            {
                JOptionPane.showOptionDialog(null, "Please add appointment!!! ", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);               
            }
            else 
            {
                String appDate1 = model.getValueAt(SelRow, 6).toString();
                String appTime1 = model.getValueAt(SelRow, 7).toString();
                Vaccination_Center vacCenter1 = new Vaccination_Center(model.getValueAt(SelRow, 8).toString(), 
                        model.getValueAt(SelRow, 9).toString(), model.getValueAt(SelRow, 10).toString(), 
                        model.getValueAt(SelRow, 11).toString(), model.getValueAt(SelRow, 12).toString());
                
                Appointment2 app2 = new Appointment2(appDate1,appTime1,vacCenter1,appDate,time);
                app2.setVacCenter(vacCenter);
                
                model.setValueAt(appDate,SelRow,14);
                model.setValueAt(time,SelRow,15);
                model.setValueAt(vacCenter.getCode(),SelRow,16);
                model.setValueAt(vacCenter.getName(),SelRow,17);
                model.setValueAt(vacCenter.getAddress(),SelRow,18);
                model.setValueAt(vacCenter.getVaccineName(),SelRow,19);
                model.setValueAt(vacCenter.getVaccineBatch(),SelRow,20);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app2);
            
                System.out.println(C1.toString2());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("Citizens.txt", SelRow, C1.toString2());
            }
        }
        else if(cmbPeople.getSelectedIndex()==1)
        {
            // get date from datepicker
            Date date1 = new Date(datePicker1.getText());
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            String appDate = formatter.format(date1);
            System.out.println(appDate);
        
            // get time from timepicker
            String time = timePicker1.getText();
        
            // get center from combo box
            String center = cmbCenter.getSelectedItem().toString();
        
            //get details of vaccination center
            Vaccination_Center vacCenter = new Vaccination_Center();
        
            File file = new File("Vaccination_Center.txt");
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String Line = Sc.nextLine();
                    String[] Arr = Line.split(";");
                    if(center.equals(Arr[1]))
                    {
                        vacCenter.setCode(Arr[0]);
                        vacCenter.setName(Arr[1]);
                        vacCenter.setAddress(Arr[2]);
                        vacCenter.setVac(new Vaccines(Arr[3],Arr[4]));
                    }
                    System.out.println("Found");
                    System.out.println(vacCenter);
                }
            }   
            catch(FileNotFoundException ex)
            {
            
            }
        
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 6).toString();
        
            if(isNull.equals("null"))
            {
                JOptionPane.showOptionDialog(null, "Please add appointment!!! ", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);               
            }
            else 
            {
                String appDate1 = model.getValueAt(SelRow, 6).toString();
                String appTime1 = model.getValueAt(SelRow, 7).toString();
                Vaccination_Center vacCenter1 = new Vaccination_Center(model.getValueAt(SelRow, 8).toString(), 
                        model.getValueAt(SelRow, 9).toString(), model.getValueAt(SelRow, 10).toString(), 
                        model.getValueAt(SelRow, 11).toString(), model.getValueAt(SelRow, 12).toString());
                
                Appointment2 app2 = new Appointment2(appDate1,appTime1,vacCenter1,appDate,time);
                app2.setVacCenter(vacCenter);
                
                model.setValueAt(appDate,SelRow,14);
                model.setValueAt(time,SelRow,15);
                model.setValueAt(vacCenter.getCode(),SelRow,16);
                model.setValueAt(vacCenter.getName(),SelRow,17);
                model.setValueAt(vacCenter.getAddress(),SelRow,18);
                model.setValueAt(vacCenter.getVaccineName(),SelRow,19);
                model.setValueAt(vacCenter.getVaccineBatch(),SelRow,20);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app2);
            
                System.out.println(C1.toString2());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("NonCitizens.txt", SelRow, C1.toString2());
            }
        }
    }//GEN-LAST:event_btnModifyDose2ActionPerformed

    private void btnRemoveDose1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDose1ActionPerformed
        
        if(cmbPeople.getSelectedIndex()==0)
        {
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 6).toString();
        
            if(isNull.equals("null"))
            {
                JOptionPane.showOptionDialog(null, "No Appointment can be removed!!!", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);               
            }
            else if(model.getValueAt(SelRow,14).toString().equals("null"))
            {
                Appointment2 app = new Appointment2(null, null); 
                
                model.setValueAt("null",SelRow,6);
                model.setValueAt("null",SelRow,7);
                model.setValueAt("null",SelRow,8);
                model.setValueAt("null",SelRow,9);
                model.setValueAt("null",SelRow,10);
                model.setValueAt("null",SelRow,11);
                model.setValueAt("null",SelRow,12);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(),app);
            
                System.out.println(C1.toString2());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("Citizens.txt", SelRow, C1.toString2());
            }
            else
            {   
                JOptionPane.showOptionDialog(null, "Please remove appointment 2 first!!!", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);
            }
        }
        else if(cmbPeople.getSelectedIndex()==1)
        {
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 6).toString();
        
            if(isNull.equals("null"))
            {
                JOptionPane.showOptionDialog(null, "No Appointment can be removed!!!", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);               
            }
            else if(model.getValueAt(SelRow,14).toString().equals("null"))
            {
                Appointment2 app = new Appointment2(null, null); 
                
                model.setValueAt("null",SelRow,6);
                model.setValueAt("null",SelRow,7);
                model.setValueAt("null",SelRow,8);
                model.setValueAt("null",SelRow,9);
                model.setValueAt("null",SelRow,10);
                model.setValueAt("null",SelRow,11);
                model.setValueAt("null",SelRow,12);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(),app);
            
                System.out.println(C1.toString2());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("NonCitizens.txt", SelRow, C1.toString2());
            }
            else
            {   
                JOptionPane.showOptionDialog(null, "Please remove appointment 2 first!!!", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);
            }
        }
    }//GEN-LAST:event_btnRemoveDose1ActionPerformed

    private void btnRemoveDose2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDose2ActionPerformed
        
        if(cmbPeople.getSelectedIndex()==0)
        {
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 14).toString();
        
            if(isNull.equals("null"))
            {
                JOptionPane.showOptionDialog(null, "No Appointment can be removed!!!", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);               
            }
            else
            {
                Appointment1 app1 = new Appointment1(model.getValueAt(SelRow, 6).toString(),model.getValueAt(SelRow, 7).toString());
                Vaccination_Center vacCenter = new Vaccination_Center(model.getValueAt(SelRow, 8).toString(),
                        model.getValueAt(SelRow, 9).toString(),model.getValueAt(SelRow, 10).toString(),
                        model.getValueAt(SelRow, 11).toString(),model.getValueAt(SelRow, 12).toString());
                app1.setVacCenter(vacCenter);
                
                model.setValueAt("null",SelRow,14);
                model.setValueAt("null",SelRow,15);
                model.setValueAt("null",SelRow,16);
                model.setValueAt("null",SelRow,17);
                model.setValueAt("null",SelRow,18);
                model.setValueAt("null",SelRow,19);
                model.setValueAt("null",SelRow,20);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app1);
            
                System.out.println(C1.toString3());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("Citizens.txt", SelRow, C1.toString3());
            }
        } 
        else if(cmbPeople.getSelectedIndex()==1)
        {
            DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
            int SelRow = tblPeople.getSelectedRow();
            String isNull = model.getValueAt(SelRow, 14).toString();
        
            if(isNull.equals("null"))
            {
                JOptionPane.showOptionDialog(null, "No Appointment can be removed!!!", "Reminder", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, null, null);               
            }
            else
            {
                Appointment1 app1 = new Appointment1(model.getValueAt(SelRow, 6).toString(),model.getValueAt(SelRow, 7).toString());
                Vaccination_Center vacCenter = new Vaccination_Center(model.getValueAt(SelRow, 8).toString(),
                        model.getValueAt(SelRow, 9).toString(),model.getValueAt(SelRow, 10).toString(),
                        model.getValueAt(SelRow, 11).toString(),model.getValueAt(SelRow, 12).toString());
                app1.setVacCenter(vacCenter);
                
                model.setValueAt("null",SelRow,14);
                model.setValueAt("null",SelRow,15);
                model.setValueAt("null",SelRow,16);
                model.setValueAt("null",SelRow,17);
                model.setValueAt("null",SelRow,18);
                model.setValueAt("null",SelRow,19);
                model.setValueAt("null",SelRow,20);
            
                Citizens C1 = new Citizens(model.getValueAt(SelRow, 0).toString(),
                model.getValueAt(SelRow, 1).toString(), 
                model.getValueAt(SelRow, 2).toString(), 
                model.getValueAt(SelRow, 3).toString(), 
                model.getValueAt(SelRow, 4).toString(), app1);
            
                System.out.println(C1.toString3());
        
                FileOperation Fop = new FileOperation();
                Fop.ModifyTextFile("NonCitizens.txt", SelRow, C1.toString3());
            }
        } 
    }//GEN-LAST:event_btnRemoveDose2ActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        
        DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
        model.setNumRows(0);
        
        if(cmbPeople.getSelectedIndex()==0)
        {
            File file = new File("Citizens.txt");     
        
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String[] line = Sc.nextLine().split(";");
                    model.addRow(line);
                }
            }
            catch(FileNotFoundException ex)
            {
            
            }   
        }
        else if(cmbPeople.getSelectedIndex()==1)
        {
            File file = new File("NonCitizens.txt");     
        
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String[] line = Sc.nextLine().split(";");
                    model.addRow(line);
                }
            }
            catch(FileNotFoundException ex)
            {
            
            }  
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        DefaultTableModel model = (DefaultTableModel)tblPeople.getModel();
        model.setNumRows(0);
         
        if(cmbPeople.getSelectedIndex()==0)
        {
            File file = new File("Citizens.txt");     
        
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String[] line = Sc.nextLine().split(";");
                    
                    if(line[0].equals(txtSearch.getText()) || line[1].equals(txtSearch.getText()) || 
                    line[2].equals(txtSearch.getText()) || line[3].equals(txtSearch.getText()) ||
                    line[4].equals(txtSearch.getText()) || line[5].equals(txtSearch.getText()) || 
                    line[6].equals(txtSearch.getText()) || line[7].equals(txtSearch.getText()) || 
                    line[8].equals(txtSearch.getText()) || line[9].equals(txtSearch.getText()) || 
                    line[10].equals(txtSearch.getText()) || line[11].equals(txtSearch.getText()) || 
                    line[12].equals(txtSearch.getText()) || line[13].equals(txtSearch.getText()) ||
                    line[14].equals(txtSearch.getText()) || line[15].equals(txtSearch.getText()) || 
                    line[16].equals(txtSearch.getText()) || line[17].equals(txtSearch.getText()) || 
                    line[18].equals(txtSearch.getText()) || line[19].equals(txtSearch.getText()) || 
                    line[20].equals(txtSearch.getText()))
                    
                    model.addRow(line);
                }
            }
            catch(FileNotFoundException ex)
            {
            
            }   
        }
        else if(cmbPeople.getSelectedIndex()==1)
        {
            File file = new File("NonCitizens.txt");     
        
            try
            {
                Scanner Sc = new Scanner(file);
                while(Sc.hasNext())
                {
                    String[] line = Sc.nextLine().split(";");
                    
                    if(line[0].equals(txtSearch.getText()) || line[1].equals(txtSearch.getText()) || 
                    line[2].equals(txtSearch.getText()) || line[3].equals(txtSearch.getText()) ||
                    line[4].equals(txtSearch.getText()) || line[5].equals(txtSearch.getText()) || 
                    line[6].equals(txtSearch.getText()) || line[7].equals(txtSearch.getText()) || 
                    line[8].equals(txtSearch.getText()) || line[9].equals(txtSearch.getText()) || 
                    line[10].equals(txtSearch.getText()) || line[11].equals(txtSearch.getText()) || 
                    line[12].equals(txtSearch.getText()) || line[13].equals(txtSearch.getText()) ||
                    line[14].equals(txtSearch.getText()) || line[15].equals(txtSearch.getText()) || 
                    line[16].equals(txtSearch.getText()) || line[17].equals(txtSearch.getText()) || 
                    line[18].equals(txtSearch.getText()) || line[19].equals(txtSearch.getText()) || 
                    line[20].equals(txtSearch.getText()))
                    
                    model.addRow(line);
                }
            }
            catch(FileNotFoundException ex)
            {
            
            }   
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appointment_Function.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appointment_Function.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appointment_Function.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appointment_Function.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appointment_Function().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnModifyDose1;
    private javax.swing.JButton btnModifyDose2;
    private javax.swing.JButton btnRemoveDose1;
    private javax.swing.JButton btnRemoveDose2;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cmbCenter;
    private javax.swing.JComboBox<String> cmbPeople;
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPeople;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
